<%- include('partials/navbar') %>

<h1><%= referee.referee_name %></h1>
<img src="/images/avatar-placeholder.png" alt="Referee Photo" width="150" class="avatar">

<!-- COMMENTS -->
<h2>Comments</h2>
<% if (comments.length > 0) { %>
  <% comments.forEach(c => { %>
    <div class="comment">
      <strong><%= c.user_name || 'Anonymous' %></strong>  
      (Rating: <%= c.rating %>/5)  
      <p><%= c.comment %></p>
      <small><%= new Date(c.created_at).toLocaleString() %></small>
    </div>
  <% }) %>
<% } else { %>
  <p>No comments yet. Be the first to comment!</p>
<% } %>

<!-- LEAVE A COMMENT -->
<h3>Leave a Comment</h3>
<form method="POST" action="/referee/<%= referee.referee_id %>/comment">
  <input type="text" name="user_name" placeholder="Your Name">
  <textarea name="comment" placeholder="Your comment" required></textarea>
  <label>Rating:</label>
  <select name="rating" required>
    <option value="">Select</option>
    <option value="1">1 - Poor</option>
    <option value="2">2</option>
    <option value="3">3 - Average</option>
    <option value="4">4</option>
    <option value="5">5 - Excellent</option>
  </select>
  <button type="submit">Submit</button>
</form>

<!-- PERSONAL STATS -->
<h2>Personal Stats (per League & Season)</h2>
<% if (personalStats.length > 0) { %>
  <table id="personal-stats-table" class="table table-striped table-bordered table-hover">
    <thead>
      <tr>
        <th>League</th>
        <th>Season</th>
        <th>Matches</th>
        <th>2min</th>
        <th>5min</th>
        <th>Total Penalties</th>
        <th>Avg 2min</th>
        <th>Avg 5min</th>
      </tr>
    </thead>
    <tbody>
      <% personalStats.forEach(s => { %>
        <tr>
          <td><%= s.league %></td>
          <td><%= s.season %></td>
          <td><%= s.matches %></td>
          <td><%= s.total_2min %></td>
          <td><%= s.total_5min %></td>
          <td><%= s.total_penalties %></td>
          <td><%= s.avg_2min %></td>
          <td><%= s.avg_5min %></td>
        </tr>
      <% }) %>
    </tbody>
  </table>
<% } else { %>
  <p>No personal stats available.</p>
<% } %>

<!-- PAIR STATS -->
<h2>Pair Stats</h2>
<% if (pairStats.length > 0) { %>
  <table id="pair-stats-table" class="table table-striped table-bordered table-hover">
    <thead>
      <tr>
        <th>Pair Name</th>
        <th>League</th>
        <th>Season</th>
        <th>Matches</th>
        <th>2min</th>
        <th>5min</th>
        <th>Total Penalties</th>
        <th>Avg 2min</th>
        <th>Avg 5min</th>
      </tr>
    </thead>
    <tbody>
      <% pairStats.forEach(s => { %>
        <tr>
          <td><%= s.pair_name %></td>
          <td><%= s.league %></td>
          <td><%= s.season %></td>
          <td><%= s.matches %></td>
          <td><%= s.total_2min %></td>
          <td><%= s.total_5min %></td>
          <td><%= s.total_penalties %></td>
          <td><%= s.avg_2min %></td>
          <td><%= s.avg_5min %></td>
        </tr>
      <% }) %>
    </tbody>
  </table>
<% } else { %>
  <p>No pair stats available.</p>
<% } %>



<script>
  // Optional: sorting for both stats tables with arrows
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('table').forEach(table => {
    const headers = table.querySelectorAll('th');
    let sortDirection = {};

    headers.forEach((header, index) => {
      header.style.cursor = 'pointer';
      header.addEventListener('click', () => {
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const direction = sortDirection[index] === 'asc' ? 'desc' : 'asc';
        sortDirection[index] = direction;

        rows.sort((a, b) => {
          let valA = a.children[index].innerText.trim();
          let valB = b.children[index].innerText.trim();

          // Helper to parse season/year string into number for sorting
          function parseSeason(val) {
            // If range with / or -
            if (/^\d{2,4}([\/\-])\d{2,4}$/.test(val)) {
              let yearPart = val.split(/[/\-]/)[0];
              return parseYear(yearPart);
            }
            // Otherwise parse year directly
            return parseYear(val);
          }

          // Parse year string (2 or 4 digits) into a full year number for sorting
          function parseYear(y) {
            let yearNum = parseInt(y);
            if (isNaN(yearNum)) return 0;
            // If 2 digits, assume 2000+ for sorting, adjust if needed
            if (yearNum < 100) {
              return 2000 + yearNum;
            }
            return yearNum;
          }

          // Numeric check for other columns
          const numA = parseFloat(valA);
          const numB = parseFloat(valB);
          if (!isNaN(numA) && !isNaN(numB)) {
            valA = numA;
            valB = numB;
          } else if (index === 1) { // Season column is 2nd (index=1)
            valA = parseSeason(valA);
            valB = parseSeason(valB);
          }

          if (valA < valB) return direction === 'asc' ? -1 : 1;
          if (valA > valB) return direction === 'asc' ? 1 : -1;
          return 0;
        });

        tbody.innerHTML = '';
        rows.forEach(row => tbody.appendChild(row));

        // Remove old arrows, add arrow to current header
        headers.forEach(h => h.innerHTML = h.innerHTML.replace(/ ▲| ▼/, ''));
        header.innerHTML += direction === 'asc' ? ' ▲' : ' ▼';
      });
    });
  });
});
</script>

